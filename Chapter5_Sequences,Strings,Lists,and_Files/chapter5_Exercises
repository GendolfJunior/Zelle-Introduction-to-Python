True/False
1. False - Ok
2. True - Ok
3. False - Ok
4. True - Ok
5. True - Ok
6. True - Ok
7. True - Ok
8. False - Ok
9. False - Ok
10. True - Not Ok. Revisited and understood the reason.

Multiple choice
1. d. - Ok
2. c. - Ok
3. a. - Ok
4. c. - Ok
5. c. - Ok
6. d. - Ok
7. d. - Ok
8. c. - Ok
9. a. - Not Ok
10. a. - Ok. Revisited and understood the reason.

Discussion
#  1. Given the initial statements:
#
#     s1 = "spam"
#     s2 = "hi!"
#
#     Show the result of evaluating each of the following string expressions.
                                            Expected          |      Actual
a) "The Knights who say, " + s2      The Knights who say, hi! | 'The Knights who say, hi!'
b) 3 * s1 + 2 * s2                   spamspamspamhi!hi!       | spamspamspamhi!hi!
c) s1[1]                                        'p'           |     'p'
d) s1[1:3]                              'pam'                 |     'pa'
e) s1[2] + s2[:2]                         'ahi'               |     'ani'
f ) s1 + s2[-1]                             'spam'            |     'spam!'
g) s1.upper()                               'SPAM'            |     'SPAM'
h) s2.upper().ljust(4) * 3            'HI! HI! HI! '          |     'HI! HI! HI! '

#  2. Given the same initial statements as in the previous problem, show a Python expression that
#     that could construct each of the following results by performing string operations on s1 and s2.

#     a) "NI"                                s2[:2].upper()   |    s2.upper()[:-1]
#     b) "ni!spamni!"                        s2 + s1 + s2     |    s2+ s1 + s2
#     c) "Spam Ni! Spam Ni! Spam Ni!"        ((s1.capitalize() + " " + s2.capitalize() + " ") * 3)[:-1] | ((s1 + " " + s2 + " ")*3).title()[:-1]
#     d) "spam"                              s1                |    s1
#     e) ["sp","m"]                          s1.split(sep="a") |    s1.split(sep="a")
#     f) "spm"                               s3 = s1.split(sep="a") |  "".join(s1.split("a"))
                                             "".join(s3)        |

#  3. Show the output that would be generated by each of the following program fragments.

#     a) for ch in "aardvark":
#            print(ch)
#        Output:
#        Expected                                |  Actual
#  a)     a\n a\n r\n ...                        |  as expected
#  b)     now\n is\n the\ ....                   |  as expected
#  c)     M ss ss pp                             |  as expected
#  d)     'scrt'                                 |  as expected
#  e)     tfdsfu                                 |  as expected

#  4. Show the string that would result from each of the following string formatting operations. If the
#     operation is not legal, explain why:

a) Looks like spam and eggs for breakfast - Ok
b) "There is {0} {1} {2} {3}".format(1, "spam", 4, "you") => "There is 1 spam 4 you"  - Ok
c) "Hello {0}".format("Susan" , "Computewell") => "Hello Susan" - Ok
d) "{0:0.2f} {0:0.2f}".format(2.3, 2.3468) => 2.30 2.30   - Ok
e) "{7.5f}{7.5f}".format(2.3, 2.3468)   =>  2.30000      2.30000  => The operation is not legal. There is no index followed by : supplied in each of the curly braces.
f) "Time left {0:02}:{1:05.2f}".format(1, 37.374) => "time left 1:37.37" => not Ok, the result is with leading 0 => Time left 01:37.37'
g) "{1:3}".format("14") => this operation is illegal.

5. because if somebody possesing your private key, they can easily intercept any of incoming messages. Hence, it makes you vulnarable.
Public key is safer because it establishes a secured connection between you and other side. All the messages ecrypted with public key
could be decrypted only by you because only you know the private key.

